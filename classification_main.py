from pathlib import Path
from ember.features import PEFeatureExtractor
import argparse
import json
import ember
from pds import PDSFilter
import lief
lief.logging.disable()
pds_filter = None

def print_malicious():
    print("""
____    __    ____  ___      .______      .__   __.  __  .__   __.   _______                                                                    
\   \  /  \  /   / /   \     |   _  \     |  \ |  | |  | |  \ |  |  /  _____| _                                                                 
 \   \/    \/   / /  ^  \    |  |_)  |    |   \|  | |  | |   \|  | |  |  __  (_)                                                                
  \            / /  /_\  \   |      /     |  . `  | |  | |  . `  | |  | |_ |                                                                    
   \    /\    / /  _____  \  |  |\  \----.|  |\   | |  | |  |\   | |  |__| |  _                                                                 
    \__/  \__/ /__/     \__\ | _| `._____||__| \__| |__| |__| \__|  \______| (_)                                                                
 _______  __   __       _______     __       _______.   .___  ___.      ___       __       __    ______  __    ______    __    __       _______.
|   ____||  | |  |     |   ____|   |  |     /       |   |   \/   |     /   \     |  |     |  |  /      ||  |  /  __  \  |  |  |  |     /       |
|  |__   |  | |  |     |  |__      |  |    |   (----`   |  \  /  |    /  ^  \    |  |     |  | |  ,----'|  | |  |  |  | |  |  |  |    |   (----`
|   __|  |  | |  |     |   __|     |  |     \   \       |  |\/|  |   /  /_\  \   |  |     |  | |  |     |  | |  |  |  | |  |  |  |     \   \    
|  |     |  | |  `----.|  |____    |  | .----)   |      |  |  |  |  /  _____  \  |  `----.|  | |  `----.|  | |  `--'  | |  `--'  | .----)   |   
|__|     |__| |_______||_______|   |__| |_______/       |__|  |__| /__/     \__\ |_______||__|  \______||__|  \______/   \______/  |_______/    """)



def model_classify(args, ember_sample):
    pass

def pds_classify(args, ember_sample):
    return ember_sample in pds_filter


def main():
    DEFAULT_EMBER_FEATURES = 2
    parser = argparse.ArgumentParser(description='Malware Classifier')
    parser.add_argument(
        '-f', '--file', dest="file", required=True, type=Path, help='Path to the ember sample to be examined')
    parser.add_argument(
        '-d', '--pds-db', required=True, type=Path, help='Path to the ember sample to be examined')
    parser.add_argument(
        '--pds-only', required=False, action="store_true", help='Classify by using only the PDS filter')
    parser.add_argument(
        '--model-only', required=False, action="store_true", help='Classify by using only the NN filter')

    args = parser.parse_args()
    
    if not args.file.exists():
        print("Error: file path doesn't exists")
        return
    elif args.file.is_dir():
        print("Error: file path is a directory")
        return
    with args.file.open("rb") as f:
        try:
            extractor = PEFeatureExtractor(DEFAULT_EMBER_FEATURES, print_feature_warning=False)
            ember_sample = extractor.raw_features(f.read())
        except json.JSONDecodeError:
            print("Error: Not a valid ember sample json")
            return
    
    if not args.pds_db.exists():
        print("Error: pds db path doesn't exists")
        return
    elif args.pds_db.is_dir():
        print("Error: pds db path is a directory")
        return
    with args.pds_db.open("rb") as f:
        global pds_filter
        pds_filter = PDSFilter.fromfile(f)

    if args.model_only:
        is_malicious = model_classify(args, ember_sample)
    elif args.pds_only:
        is_malicious = pds_classify(args, ember_sample)
    else:
        is_malicious = model_classify(args, ember_sample)
        if not is_malicious:
            is_malicious = pds_classify(args, ember_sample)

    if is_malicious:
        print_malicious()
    else:
        print("File is Ok")


if __name__ == "__main__":
    main()