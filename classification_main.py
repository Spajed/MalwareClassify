from pathlib import Path
from ember.features import PEFeatureExtractor
import argparse
import json
import ember
import numpy as np
from pds import PDSFilter
from model import MalwareDetectionNN
import pickle as pk

import lief
lief.logging.disable()
pds_filter = None

def print_malicious():
    print("""
____    __    ____  ___      .______      .__   __.  __  .__   __.   _______                                                                    
\   \  /  \  /   / /   \     |   _  \     |  \ |  | |  | |  \ |  |  /  _____| _                                                                 
 \   \/    \/   / /  ^  \    |  |_)  |    |   \|  | |  | |   \|  | |  |  __  (_)                                                                
  \            / /  /_\  \   |      /     |  . `  | |  | |  . `  | |  | |_ |                                                                    
   \    /\    / /  _____  \  |  |\  \----.|  |\   | |  | |  |\   | |  |__| |  _                                                                 
    \__/  \__/ /__/     \__\ | _| `._____||__| \__| |__| |__| \__|  \______| (_)                                                                
 _______  __   __       _______     __       _______.   .___  ___.      ___       __       __    ______  __    ______    __    __       _______.
|   ____||  | |  |     |   ____|   |  |     /       |   |   \/   |     /   \     |  |     |  |  /      ||  |  /  __  \  |  |  |  |     /       |
|  |__   |  | |  |     |  |__      |  |    |   (----`   |  \  /  |    /  ^  \    |  |     |  | |  ,----'|  | |  |  |  | |  |  |  |    |   (----`
|   __|  |  | |  |     |   __|     |  |     \   \       |  |\/|  |   /  /_\  \   |  |     |  | |  |     |  | |  |  |  | |  |  |  |     \   \    
|  |     |  | |  `----.|  |____    |  | .----)   |      |  |  |  |  /  _____  \  |  `----.|  | |  `----.|  | |  `--'  | |  `--'  | .----)   |   
|__|     |__| |_______||_______|   |__| |_______/       |__|  |__| /__/     \__\ |_______||__|  \______||__|  \______/   \______/  |_______/    """)



def model_classify(args, ember_sample):
    CLASSIFICATION_THRESHOLD = 0.999333
    model = MalwareDetectionNN(400)
    model.load_checkpoint(args.model_weights)

    scaler = pk.load(open(args.scaler,'rb'))
    ember_sample_scaled = scaler.transform(ember_sample)
    pca = pk.load(open(args.pca,'rb')) 
    ember_sample_pca = pca.transform(ember_sample_scaled)
    file_score = model._MalwareDetectionNN__model.predict(ember_sample_pca, verbose=0).ravel()[0]

    return file_score > CLASSIFICATION_THRESHOLD
    



def pds_classify(args, ember_sample):
    return ember_sample in pds_filter


def main():
    DEFAULT_EMBER_FEATURES = 2
    parser = argparse.ArgumentParser(description='Malware Classifier')
    parser.add_argument(
        '-f', '--file', dest="file", required=True, type=Path, help='Path to the ember sample to be examined')
    parser.add_argument(
        '-d', '--pds-db', default='pds.db', type=Path, help='Path to the PDS database')
    parser.add_argument(
        '-m', '--model-weights', default='model_weights.h5', type=Path, help='Path to the weights of the model')
    parser.add_argument(
        '-p', '--pca', default='pca.pkl', type=Path, help='Path to the pca object')
    parser.add_argument(
        '-s', '--scaler', default='scaler.pkl', type=Path, help='Path to the scaler object')
    parser.add_argument(
        '--pds-only', required=False, action="store_true", help='Classify by using only the PDS filter')
    parser.add_argument(
        '--model-only', required=False, action="store_true", help='Classify by using only the NN filter')

    args = parser.parse_args()
    
    if not args.file.exists():
        print("Error: file path doesn't exists")
        return
    elif args.file.is_dir():
        print("Error: file path is a directory")
        return
    with args.file.open("rb") as f:
        try:
            extractor = PEFeatureExtractor(DEFAULT_EMBER_FEATURES, print_feature_warning=False)
            file_data = f.read()
            ember_sample_raw = extractor.raw_features(file_data)
            ember_sample_features = np.array(extractor.feature_vector(file_data), dtype=np.float32, ndmin=2)
        except json.JSONDecodeError:
            print("Error: Not a valid ember sample json")
            return
    
    if not args.pds_db.exists():
        print("Error: pds db path doesn't exists")
        return
    elif args.pds_db.is_dir():
        print("Error: pds db path is a directory")
        return
    with args.pds_db.open("rb") as f:
        global pds_filter
        pds_filter = PDSFilter.fromfile(f)

    if not args.model_weights.exists():
        print("Error: model weights path doesn't exists")
        return
    elif args.model_weights.is_dir():
        print("Error: model weights path is a directory")
        return
    
    if not args.pca.exists():
        print("Error: pca path doesn't exists")
        return
    elif args.pca.is_dir():
        print("Error: pca path is a directory")
        return
    
    if not args.scaler.exists():
        print("Error: scaler path doesn't exists")
        return
    elif args.scaler.is_dir():
        print("Error: scaler path is a directory")
        return
    
    

    if args.model_only:
        is_malicious = model_classify(args, ember_sample_features)
    elif args.pds_only:
        is_malicious = pds_classify(args, ember_sample_raw)
    else:
        is_malicious = model_classify(args, ember_sample_features)
        if not is_malicious:
            is_malicious = pds_classify(args, ember_sample_raw)

    if is_malicious:
        print_malicious()
    else:
        print("File is Ok")


if __name__ == "__main__":
    main()